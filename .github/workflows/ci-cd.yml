name: SwarmNode Protocol CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  SOLIDITY_VERSION: '0.8.19'

jobs:
  # Tests et validation des smart contracts
  contracts-test:
    name: Smart Contracts Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Compile contracts
      run: npx hardhat compile
    
    - name: Run contract tests
      run: npx hardhat test
      env:
        REPORT_GAS: true
    
    - name: Run coverage
      run: npx hardhat coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: contracts
        name: contracts-coverage
    
    - name: Contract size check
      run: npx hardhat size-contracts
    
    - name: Security audit with Slither
      uses: crytic/slither-action@v0.3.0
      with:
        node-version: ${{ env.NODE_VERSION }}
        slither-config: slither.config.json
        fail-on: high

  # Tests du SDK TypeScript
  sdk-test:
    name: SDK Testing
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type checking
      run: npm run type-check
    
    - name: Lint code
      run: npm run lint
    
    - name: Run SDK tests
      run: npm run test:sdk
    
    - name: Build SDK
      run: npm run build:sdk

  # Tests du frontend
  frontend-test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type checking
      run: npm run type-check
    
    - name: Lint code
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Analyse de sÃ©curitÃ©
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [contracts-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
    
    - name: Run MythX security analysis
      uses: mythx/mythx-cli-action@v1
      with:
        mythx-api-key: ${{ secrets.MYTHX_API_KEY }}
        target: 'contracts/'
    
    - name: Dependency vulnerability scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-report.sarif'

  # DÃ©ploiement sur testnets
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [contracts-test, sdk-test]
    if: github.ref == 'refs/heads/develop'
    environment: testnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Deploy to Avalanche Fuji
      run: npx hardhat deploy --network fuji
      env:
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
    
    - name: Verify contracts on Snowtrace
      run: npx hardhat verify --network fuji
      env:
        SNOWTRACE_API_KEY: ${{ secrets.SNOWTRACE_API_KEY }}
    
    - name: Update deployment info
      run: |
        echo "Testnet deployment completed at $(date)" >> deployment-log.txt
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deployment-log.txt
        git commit -m "Update testnet deployment info" || exit 0
        git push

  # Publication du package NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [contracts-test, sdk-test, security-audit]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build SDK
      run: npm run build:sdk
    
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # DÃ©ploiement sur mainnet
  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [contracts-test, sdk-test, security-audit]
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
    environment: mainnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Deploy to Avalanche Mainnet
      run: npx hardhat deploy --network mainnet
      env:
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
        INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
    
    - name: Verify contracts on Snowtrace
      run: npx hardhat verify --network mainnet
      env:
        SNOWTRACE_API_KEY: ${{ secrets.SNOWTRACE_API_KEY }}
    
    - name: Create deployment summary
      run: |
        echo "# ðŸš€ Mainnet Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "## Contract Addresses" >> $GITHUB_STEP_SUMMARY
        cat deployments/mainnet/.chainId >> $GITHUB_STEP_SUMMARY
        echo "## Gas Usage Report" >> $GITHUB_STEP_SUMMARY
        cat gas-report.json >> $GITHUB_STEP_SUMMARY

  # DÃ©ploiement du frontend
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_AVALANCHE_RPC_URL: ${{ secrets.AVALANCHE_RPC_URL }}
        VITE_CONTRACT_ADDRESS: ${{ secrets.CONTRACT_ADDRESS }}
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

  # Notification de dÃ©ploiement
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-mainnet, deploy-frontend]
    if: always()
    
    steps:
    - name: Discord notification
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ðŸŽ‰ SwarmNode Protocol dÃ©ployÃ© avec succÃ¨s !
          
          ðŸ“Š **Status des dÃ©ploiements:**
          - Smart Contracts: ${{ needs.deploy-mainnet.result }}
          - Frontend: ${{ needs.deploy-frontend.result }}
          
          ðŸ”— **Liens utiles:**
          - Site web: https://swarmnode.protocol
          - Documentation: https://docs.swarmnode.protocol
          - Snowtrace: https://snowtrace.io/address/${{ secrets.CONTRACT_ADDRESS }}
