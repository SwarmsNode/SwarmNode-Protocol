name: SwarmNode Protocol - Production CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript check
        run: npm run type-check

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

  # Smart Contract Tests
  contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        run: |
          cd contracts
          forge install

      - name: Compile contracts
        run: |
          cd contracts
          forge build

      - name: Run contract tests
        run: |
          cd contracts
          forge test -vvv

      - name: Generate gas report
        run: |
          cd contracts
          forge test --gas-report > gas-report.txt

      - name: Upload gas report
        uses: actions/upload-artifact@v4
        with:
          name: gas-report
          path: contracts/gas-report.txt

  # SDK and API Tests
  sdk-tests:
    name: SDK & API Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build SDK
        run: npm run build

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          MONGODB_URI: mongodb://localhost:27017/swarmnode_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          MONGODB_URI: mongodb://localhost:27017/swarmnode_test
          REDIS_URL: redis://localhost:6379
          FUJI_RPC_URL: https://api.avax-test.network/ext/bc/C/rpc
          SWARMNODE_TEST_API_KEY: ${{ secrets.SWARMNODE_TEST_API_KEY }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: sdk-tests

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [security-scan, contract-tests, sdk-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build SDK
        run: npm run build

      - name: Build API
        run: |
          cd api
          npm ci
          npm run build

      - name: Package for distribution
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            swarmnode-protocol-*.tgz

  # Docker Build
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/swarmnode
            docker-compose pull
            docker-compose up -d
            docker system prune -f

      - name: Run staging tests
        run: |
          sleep 30  # Wait for services to start
          npm run test:e2e:staging
        env:
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            SwarmNode Protocol deployed to staging
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy contracts to mainnet
        run: |
          cd contracts
          forge script script/Deploy.s.sol:DeployScript \
            --rpc-url ${{ secrets.MAINNET_RPC_URL }} \
            --private-key ${{ secrets.DEPLOY_PRIVATE_KEY }} \
            --broadcast \
            --verify \
            --etherscan-api-key ${{ secrets.SNOWTRACE_API_KEY }}

      - name: Deploy to production servers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/swarmnode
            docker-compose pull
            docker-compose up -d --no-deps api
            sleep 30
            curl -f http://localhost:3000/health || exit 1
            docker-compose up -d

      - name: Update CDN and cache
        run: |
          # Invalidate CloudFlare cache
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Run production smoke tests
        run: |
          npm run test:smoke:production
        env:
          PRODUCTION_API_URL: https://api.swarmnode.io
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ðŸš€ SwarmNode Protocol deployed to PRODUCTION
            Version: ${{ github.event.release.tag_name }}
            Release: ${{ github.event.release.html_url }}

  # Publish NPM Package
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release assets
        run: |
          npm pack
          gh release upload ${{ github.event.release.tag_name }} swarmnode-protocol-*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release'
    steps:
      - name: Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://api.swarmnode.io/health
            https://docs.swarmnode.io
          uploadArtifacts: true

      - name: Load testing with k6
        uses: grafana/k6-action@v0.3.1
        with:
          filename: scripts/load-test.js
        env:
          API_BASE_URL: https://api.swarmnode.io

      - name: Monitor uptime
        run: |
          # Register with uptime monitoring service
          curl -X POST "https://api.uptimerobot.com/v2/newMonitor" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "api_key=${{ secrets.UPTIMEROBOT_API_KEY }}" \
            -d "format=json" \
            -d "type=1" \
            -d "url=https://api.swarmnode.io/health" \
            -d "friendly_name=SwarmNode API"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, publish-npm]
    if: always()
    steps:
      - name: Clean up staging resources
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup logic here

      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new version info
          curl -X POST "https://grafana.swarmnode.io/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @grafana/dashboards/swarmnode-dashboard.json
