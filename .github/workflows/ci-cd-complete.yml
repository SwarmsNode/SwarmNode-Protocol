name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run typecheck
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        PRIVATE_KEY: ${{ secrets.TEST_PRIVATE_KEY }}
        
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run build:contracts
      
    - name: Run contract tests
      run: npm run test:gas
      
    - name: Generate contract documentation
      run: npm run docs:contracts

  build:
    name: Build SDK
    runs-on: ubuntu-latest
    needs: [test, security, contracts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build SDK
      run: npm run build
      
    - name: Generate API documentation
      run: npm run docs:generate
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sdk-build
        path: |
          dist/
          docs/
        retention-days: 30

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sdk-build
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs

  testnet-deployment:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [test, security, contracts]
    if: github.ref == 'refs/heads/develop'
    environment: testnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy to Fuji testnet
      run: npm run deploy:testnet
      env:
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        SNOWTRACE_API_KEY: ${{ secrets.SNOWTRACE_API_KEY }}
        
    - name: Verify contracts
      run: npm run verify
      env:
        SNOWTRACE_API_KEY: ${{ secrets.SNOWTRACE_API_KEY }}
        
    - name: Update deployment addresses
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deployments/
        git commit -m "Update testnet deployment addresses [skip ci]" || exit 0
        git push

  mainnet-deployment:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [test, security, contracts]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy]')
    environment: mainnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy to Avalanche mainnet
      run: npm run deploy:mainnet
      env:
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
        SNOWTRACE_API_KEY: ${{ secrets.SNOWTRACE_API_KEY }}
        
    - name: Verify contracts
      run: npm run verify
      env:
        SNOWTRACE_API_KEY: ${{ secrets.SNOWTRACE_API_KEY }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, security, contracts, build]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: ${{ env.REGISTRY_URL }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [publish]
    if: always()
    
    steps:
    - name: Notify Discord
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ðŸš€ **SwarmNode Protocol SDK** 
          ðŸ“¦ New version published to NPM
          ðŸ”— Version: ${{ github.ref }}
          âœ… Status: ${{ job.status }}
