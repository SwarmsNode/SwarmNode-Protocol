// Contract ABIs for SwarmNode Protocol
// In production, these ABIs would be automatically generated by Hardhat/Typechain

export const SWARM_TOKEN_ABI = [
  // ERC20 Standard functions
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address owner) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function approve(address spender, uint256 amount) returns (bool)",
  "function allowance(address owner, address spender) view returns (uint256)",
  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
  
  // SwarmToken specific functions
  "function MAX_SUPPLY() view returns (uint256)",
  "function createVestingSchedule(address beneficiary, uint256 amount, uint256 startTime, uint256 duration, uint256 cliffDuration)",
  "function releaseVestedTokens(address beneficiary) returns (uint256)",
  "function getVestingSchedule(address beneficiary) view returns (tuple(uint256 totalAmount, uint256 releasedAmount, uint256 startTime, uint256 duration, uint256 cliffDuration))",
  
  // Events
  "event Transfer(address indexed from, address indexed to, uint256 value)",
  "event Approval(address indexed owner, address indexed spender, uint256 value)",
  "event TokensVested(address indexed beneficiary, uint256 amount)",
  "event VestingScheduleCreated(address indexed beneficiary, uint256 amount, uint256 duration)"
];

export const AGENT_REGISTRY_ABI = [
  // Agent management
  "function deployAgent(string name, string description, string[] capabilities, uint256 autonomyLevel, uint256 rewardThreshold, string metadataURI) returns (uint256)",
  "function getAgent(uint256 agentId) view returns (tuple(address owner, string name, string description, string[] capabilities, uint256 autonomyLevel, uint256 rewardThreshold, uint256 totalRewards, uint256 deploymentTime, uint8 status, string metadataURI))",
  "function updateAgentStatus(uint256 agentId, uint8 status)",
  "function getOwnerAgents(address owner) view returns (uint256[])",
  "function getTotalAgents() view returns (uint256)",
  "function getActiveAgents() view returns (uint256)",
  
  // Communication
  "function connectAgents(uint256 agentId1, uint256 agentId2)",
  "function disconnectAgents(uint256 agentId1, uint256 agentId2)",
  "function areAgentsConnected(uint256 agentId1, uint256 agentId2) view returns (bool)",
  
  // Rewards
  "function distributeReward(uint256 agentId, uint256 amount)",
  "function claimRewards(uint256 agentId)",
  
  // Configuration
  "function setDeploymentFee(uint256 fee)",
  "function setProtocolFeePercentage(uint256 percentage)",
  "function getDeploymentFee() view returns (uint256)",
  "function getProtocolFeePercentage() view returns (uint256)",
  
  // Events
  "event AgentDeployed(uint256 indexed agentId, address indexed owner, string name)",
  "event AgentStatusUpdated(uint256 indexed agentId, uint8 status)",
  "event AgentsConnected(uint256 indexed agentId1, uint256 indexed agentId2)",
  "event RewardDistributed(uint256 indexed agentId, uint256 amount)",
  "event RewardsClaimed(uint256 indexed agentId, uint256 amount)"
];

export const TASK_MANAGER_ABI = [
  // Task management
  "function createTask(string description, string[] requiredCapabilities, uint256 reward, uint256 deadline) returns (uint256)",
  "function getTask(uint256 taskId) view returns (tuple(address creator, string description, string[] requiredCapabilities, uint256 reward, uint256 deadline, uint256 assignedAgent, uint8 status, string result, uint256 creationTime, uint256 completionTime))",
  "function assignTask(uint256 taskId, uint256 agentId)",
  "function submitTaskResult(uint256 taskId, string result)",
  "function approveTaskCompletion(uint256 taskId)",
  "function getTasks(uint256 offset, uint256 limit) view returns (uint256[])",
  "function getAgentTasks(uint256 agentId) view returns (uint256[])",
  
  // Task filtering
  "function getTasksByStatus(uint8 status) view returns (uint256[])",
  "function getTasksByCapability(string capability) view returns (uint256[])",
  
  // Configuration
  "function setMinTaskReward(uint256 minReward)",
  "function setMaxTaskDuration(uint256 maxDuration)",
  
  // Events
  "event TaskCreated(uint256 indexed taskId, address indexed creator, uint256 reward)",
  "event TaskAssigned(uint256 indexed taskId, uint256 indexed agentId)",
  "event TaskCompleted(uint256 indexed taskId, uint256 indexed agentId, string result)",
  "event TaskApproved(uint256 indexed taskId, uint256 reward)"
];

export const CROSS_SUBNET_BRIDGE_ABI = [
  // Cross-subnet messaging
  "function sendCrossSubnetMessage(bytes32 destinationSubnetId, address destinationAddress, bytes data) returns (bytes32)",
  "function receiveCrossSubnetMessage(bytes32 messageId, bytes32 sourceSubnetId, address sourceAddress, bytes data)",
  "function getCrossSubnetMessage(bytes32 messageId) view returns (tuple(bytes32 sourceSubnet, bytes32 destinationSubnet, address sourceAddress, address destinationAddress, bytes data, uint256 timestamp, uint8 status))",
  
  // Agent cross-subnet operations
  "function deployAgentToSubnet(uint256 agentId, bytes32 subnetId) returns (bytes32)",
  "function syncAgentState(uint256 agentId, bytes32 subnetId, bytes stateData)",
  "function getAgentSubnets(uint256 agentId) view returns (bytes32[])",
  
  // Asset bridging
  "function bridgeTokens(bytes32 destinationSubnet, address token, uint256 amount) returns (bytes32)",
  "function claimBridgedTokens(bytes32 messageId)",
  
  // Subnet management
  "function registerSubnet(bytes32 subnetId, string name, address bridgeAddress)",
  "function getRegisteredSubnets() view returns (bytes32[])",
  "function getSubnetInfo(bytes32 subnetId) view returns (tuple(string name, address bridgeAddress, bool active, uint256 registrationTime))",
  
  // Events
  "event CrossSubnetMessageSent(bytes32 indexed messageId, bytes32 indexed destinationSubnet, address indexed destinationAddress)",
  "event CrossSubnetMessageReceived(bytes32 indexed messageId, bytes32 indexed sourceSubnet, address indexed sourceAddress)",
  "event AgentDeployedToSubnet(uint256 indexed agentId, bytes32 indexed subnetId)",
  "event TokensBridged(bytes32 indexed messageId, bytes32 indexed destinationSubnet, address indexed token, uint256 amount)",
  "event SubnetRegistered(bytes32 indexed subnetId, string name, address bridgeAddress)"
];
